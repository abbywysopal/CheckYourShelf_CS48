Call Number Characteristics:
- Will always be at least 3 lines
    - Usually 4-5
- First line consists of 1-2 letters
    - Going to have to skip most of these
- Second Line
    - Single number (decimal)
- Third Line (may be up to like 4 of these lines)
    - Combination of letters and numbers
- Fourth Line (if it exists)
    - Publishing year
- Fifth Line (if it exists)
    - Volume (V.12)

TextBlock
- Text blocks consist of a list of Line objects
- TextLines consist of a list of Element objects

Proposed Solution:
- Check each line and make sure it contains what its supposed to 
    - = valid call number
    - isValidCallNumber
- Compare some number of the detections to see if they match
    - If they match then that is our call number
    - Could cause issues if detecting multiple call numbers at once
    - Text block .equals method
- Write a regular expression to compare to?
    - Need to read up on java regular expressions
- Put a certain number of detections in a list and compare them all and choose the ones that are most common



  /**
     *
     * @param b
     * @return true if valid instance of LC code
     */
    public boolean isValidCallNumber(TextBlock b) {
        List<? extends Text> lines = b.getComponents();

        if (lines.size() > 5 || lines.size() < 2) {
            return false;
        }

        int i = 0;
        while (lines != null & lines.get(i) != null & i < lines.size() - 1) {
            if (isLetters(lines.get(0).getValue())) {
                lines.remove(0);
            } else if (isNums(lines.get(0).getValue())) {
                i++;
            } else { return false; }

            if (isLetterNumberCombo(lines.get(i).getValue())) {
                i++;
            } else if (isDate(lines.get(i).getValue())) {  //Needs to be edited for vol. after date
                return true;
            } else { return false; }
        }
        return true;
    }

    /**
     *
     * @param lines
     * @return true if detection is only one line, false otherwise
     */
    public boolean isOneLine(List<? extends Text> lines) {
        if (lines.size() < 2) { return true; }
        else { return false; }
    }

    /**
     *
     * @param S
     * @return returns true of it is in the format of a date, could be improved by filtering for only certain dates
     * ie) 1800 to 2100
     */
    public boolean isDate(String S) {
        if(!isNums(S)) { return false; }
	    else if(S.length() != 4) { return false; }
        else { return true; }
    }

    /**
     *
     * @param S
     * @return true if given S consists of only letters
     */
    public boolean isLetters(String S) {
        for (int i = 0; i < S.length(); i++) {
            if (!Character.isLetter(S.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     *
     * @param S
     * @return true if S consists of only numbers
     */
    public boolean isNums(String S) {
        for (int i = 0; i < S.length(); i++) {
            if (!Character.isDigit(S.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     *
     * @param S
     * @return return true if S consists of letters and numbers
     */
    public boolean isLetterNumberCombo(String S) {
        Boolean letter = false;
        Boolean number = false;

        for (int i = 0; i < S.length(); i++) {
            if (Character.isDigit(S.charAt(i))) {
                number = true;
            }
            else if (Character.isLetter(S.charAt(i))) {
                letter = true;
            }
        }
        if (letter == true & number == true) { return true; }
        else { return false; }
    }
}
